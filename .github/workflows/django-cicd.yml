name: Django CI/CD on Amazon Linux 2023

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Enable maintenance mode
          sudo touch /var/www/html/maintenance.flag
          
          # Wait for existing requests to complete
          sleep 10
          
          # Clone or update repository using deploy key
          cd /home/${{ secrets.EC2_USER }}/
          if [ ! -d "Ebay-to-Web-Store" ]; then
            # Use deploy token for authentication
            git remote set-url origin https://${{ secrets.GIT_ACCESS_TOKEN }}@github.com/Yashwanth-Chandrakumar/Ebay-to-Web-Store.git
            cd Ebay-to-Web-Store
          else
            cd Ebay-to-Web-Store
            # Use deploy token for authentication
            git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/Yashwanth-Chandrakumar/Ebay-to-Web-Store.git
            git pull
          fi
          
          # Clean up Docker resources
          docker system prune -a --volumes -f
          
          # Build and deploy new container
          docker build -t yashwanthsc/pjsauto:latest ./backend/pjsautolit
          
          # Stop and remove existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -q pjs; then
            docker stop pjs
            docker rm pjs
          fi
          
          # Run new container with health check
          docker run -d --name pjs \
            -p 8000:8000 \
            --health-cmd="curl -f http://localhost:8000/health || exit 1" \
            --health-interval=5s \
            --health-retries=3 \
            --health-timeout=2s \
            yashwanthsc/pjsauto:latest
          
          # Wait for container health check
          attempts=0
          max_attempts=30
          until [ "$(docker inspect --format='{{.State.Health.Status}}' pjs)" == "healthy" ] || [ $attempts -eq $max_attempts ]; do
            echo "Waiting for container to be healthy..."
            sleep 2
            attempts=$((attempts + 1))
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Container failed to become healthy"
            exit 1
          fi
          
          # Disable maintenance mode
          sudo rm -f /var/www/html/maintenance.flag
